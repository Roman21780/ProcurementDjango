###############################################################################
### 0. ПОДГОТОВКА К ТЕСТИРОВАНИЮ
###############################################################################

### 0.1 Очистка тестовых данных (выполнить в терминале перед тестами)
### docker compose exec web python manage.py clear_test_data --keep-superuser

### 0.2 Проверка что товары из YAML на месте
GET {{apiUrl}}/products/

### 0.3 Проверка что категории из YAML на месте
GET {{apiUrl}}/categories/

### 0.4 Проверка что магазины из YAML активны
GET {{apiUrl}}/shops/

### Backend-приложение для автоматизации закупок — HTTP тесты
### Базовый URL
@baseUrl = http://localhost
@apiUrl = {{baseUrl}}/api/v1

### Переменные для тестирования
@userEmail = test@example.com
@userPassword = testpassword123
@shopEmail = shop@example.com
@shopPassword = shoppassword1232

###############################################################################
### 1. РЕГИСТРАЦИЯ И АВТОРИЗАЦИЯ
###############################################################################

### 1.1 Регистрация покупателя
POST {{apiUrl}}/user/register/
Content-Type: application/json

{
  "first_name": "Иван",
  "last_name": "Петров",
  "email": "{{userEmail}}",
  "password": "{{userPassword}}",
  "company": "ООО Тест",
  "position": "Менеджер",
  "type": "buyer"
}

### 1.2 Регистрация поставщика
POST {{apiUrl}}/user/register/
Content-Type: application/json

{
  "first_name": "Магазин",
  "last_name": "Владелец",
  "email": "{{shopEmail}}",
  "password": "{{shopPassword}}",
  "company": "ООО Магазин",
  "position": "Директор",
  "type": "shop"
}

### 1.3 Получение токена для подтверждения email
### Покупатель
docker compose exec web python manage.py shell -c "
from backend.models import ConfirmEmailToken;
token = ConfirmEmailToken.objects.filter(user__email='{{userEmail}}').first();
print(token.key if token else 'Токен не найден');
"
### Поставщик
docker compose exec web python manage.py shell -c "
from backend.models import ConfirmEmailToken;
token = ConfirmEmailToken.objects.filter(user__email='{{shopEmail}}').first();
print(token.key if token else 'Токен не найден');
"

### 1.4 Подтверждение email покупателя
POST {{apiUrl}}/user/register/confirm/
Content-Type: application/json

{
  "email": "{{userEmail}}",
  "token": "06fc92e41802ad"
}

### 1.5 Подтверждение email поставщика
POST {{apiUrl}}/user/register/confirm/
Content-Type: application/json

{
  "email": "{{shopEmail}}",
  "token": "83f20d4452bd24c196618744ed00c91071f0e13b"
}

### 1.6 Авторизация покупателя
POST {{apiUrl}}/user/login/
Content-Type: application/json

{
  "email": "{{userEmail}}",
  "password": "{{userPassword}}"
}

> {%
client.global.set("userToken", response.body.Token);
%}

### 1.7 Авторизация поставщика
POST {{apiUrl}}/user/login/
Content-Type: application/json

{
  "email": "{{shopEmail}}",
  "password": "{{shopPassword}}"
}

> {%
client.global.set("shopToken", response.body.Token);
%}

###############################################################################
### 2. УПРАВЛЕНИЕ ПРОФИЛЕМ
###############################################################################

### 2.1 Получить данные пользователя
GET {{apiUrl}}/user/details/
Authorization: Token 62fe4bcf5ab2930ba21e6eda01a1bd68223b5432

### 2.2 Обновить данные пользователя
POST {{apiUrl}}/user/details/
Authorization: Token 9eca8338412c10682312487af803761b8f9f2b82
Content-Type: application/json

{
  "first_name": "Иван",
  "last_name": "Петров",
  "company": "ООО Новая компания",
  "position": "Старший менеджер"
}

### 2.3 Сброс пароля
POST {{apiUrl}}/user/password_reset/
Content-Type: application/json

{
  "email": "{{userEmail}}"
}

###############################################################################
### 3. КОНТАКТНЫЕ ДАННЫЕ
###############################################################################

### 3.1 Создать контакт
POST {{apiUrl}}/user/contact/
Authorization: Token 62fe4bcf5ab2930ba21e6eda01a1bd68223b5432
Content-Type: application/json

{
  "city": "Москва",
  "street": "Красная улица",
  "house": "1",
  "apartment": "10",
  "phone": "+7(999)123-45-67"
}

### 3.2 Получить контакты
GET {{apiUrl}}/user/contact/
Authorization: Token 62fe4bcf5ab2930ba21e6eda01a1bd68223b5432

### 3.3 Обновить контакт
POST {{apiUrl}}/user/contact/
Authorization: Token 929890c122c32369ad8868d3a4cb84aab81d7b5a
Content-Type: application/json

{
  "id": 1,
  "city": "Санкт-Петербург",
  "street": "Невский проспект",
  "house": "10",
  "apartment": "5",
  "phone": "+7(999)987-65-43"
}

### 3.4 Удалить контакт
DELETE {{apiUrl}}/user/contact/
Authorization: Token {{userToken}}
Content-Type: application/json

{
  "items": "1"
}

###############################################################################
### 4. КАТАЛОГ ТОВАРОВ
###############################################################################

### 4.1 Получить категории
GET {{apiUrl}}/categories/

### 4.2 Получить магазины
GET {{apiUrl}}/shops/

### 4.3 Получить все товары
GET {{apiUrl}}/products/

### 4.4 Фильтр по категории и/или магазину
GET {{apiUrl}}/products?category_id=224&shop_id=3

###############################################################################
### 5. КОРЗИНА
###############################################################################

### 5.1 Получить корзину
GET {{apiUrl}}/basket/
Authorization: Token 62fe4bcf5ab2930ba21e6eda01a1bd68223b5432

### 5.2 Добавить товары
POST {{apiUrl}}/basket/
Authorization: Token 62fe4bcf5ab2930ba21e6eda01a1bd68223b5432
Content-Type: application/json

{
  "items": "[{\"product_info\":2,\"quantity\":1}]"
}

### 5.3 Обновить количество
PUT {{apiUrl}}/basket/
Authorization: Token e63ca91fd0c2aa5f1abd001a9e8639f3a0e1f518
Content-Type: application/json

{
  "items": "[{\"id\":68,\"quantity\":2}]"
}

### 5.4 Удалить товары
DELETE {{apiUrl}}/basket/
Authorization: Token {{userToken}}
Content-Type: application/json

{
  "items": "1"
}

###############################################################################
### 6. ЗАКАЗЫ
###############################################################################

### 6.1 Получить заказы
GET {{apiUrl}}/order/
Authorization: Token 62fe4bcf5ab2930ba21e6eda01a1bd68223b5432

### 6.2 Создать заказ
POST {{apiUrl}}/order/
Authorization: Token 62fe4bcf5ab2930ba21e6eda01a1bd68223b5432
Content-Type: application/json

{
  "id": 1,
  "contact": 2
}

###############################################################################
### 7. ПОСТАВЩИКИ
###############################################################################

### 7.1 Статус магазина
GET {{apiUrl}}/partner/state/
Authorization: Token db7d49fe7a8189cfd458ec75cc0154f2a3ea518c

### 7.2 Изменение статуса
POST {{apiUrl}}/partner/state/
Authorization: Token 83f20d4452bd24c196618744ed00c91071f0e13b
Content-Type: application/json

{
  "state": "true"
}

### 7.3 Обновление прайс-листа
POST {{apiUrl}}/partner/update/
Authorization: Token 9eca8338412c10682312487af803761b8f9f2b82
Content-Type: application/json

{
  "url":"https://github.com/Roman21780/ProcurementDjango/blob/production/data/shop2.yaml"
}

### 7.4 Заказы поставщика
GET {{apiUrl}}/partner/orders/
Authorization: Token db7d49fe7a8189cfd458ec75cc0154f2a3ea518c

###############################################################################
### 8. АДМИНИСТРАТИВНЫЕ ФУНКЦИИ
###############################################################################

#### 8.1 Токен администратора
docker compose exec web python manage.py shell -c "
from django.contrib.auth import get_user_model;
from rest_framework.authtoken.models import Token;
User = get_user_model();
admin = User.objects.get(email='admin@example.com');
token, _ = Token.objects.get_or_create(user=admin);
print(token.key)
"

### 8.2 Обновление статуса заказа
POST {{apiUrl}}/admin/order/status/
Authorization: Token 30461f47b8ea91c737f690175b501c5266dd0a7e
Content-Type: application/json

{
  "order_id": 2,
  "state":"confirmed"
}

###############################################################################
### 9. НЕГАТИВНЫЕ ТЕСТЫ
###############################################################################

### 9.1 Регистрация с некорректными данными
POST {{apiUrl}}/user/register/
Content-Type: application/json

{
  "first_name":"",
  "email":"invalid-email",
  "password":"123"
}

### 9.2 Авторизация неверными данными
POST {{apiUrl}}/user/login/
Content-Type: application/json

{
  "email":"nonexistent@example.com",
  "password":"wrong"
}

### 9.3 Доступ без токена
GET {{apiUrl}}/user/details/
