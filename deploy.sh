#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ Django Procurement
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy.sh [--dry-run] [--skip-backup]

set -e  # –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DRY_RUN=false
SKIP_BACKUP=false

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
while [[ $# -gt 0 ]]; do
    case $1 in
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --skip-backup)
            SKIP_BACKUP=true
            shift
            ;;
        *)
            echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"
            exit 1
            ;;
    esac
done

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è  $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫
error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ùå $1${NC}" >&2
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        error "–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (sudo)"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker
check_docker() {
    if ! command -v docker &> /dev/null; then
        log "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
        if [ "$DRY_RUN" = false ]; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            usermod -aG docker $USER
            rm get-docker.sh
            log "‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞."
            exit 0
        else
            log "‚úÖ [DRY RUN] Docker –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
check_docker_compose() {
    if ! command -v docker-compose &> /dev/null; then
        log "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
        if [ "$DRY_RUN" = false ]; then
            apt-get update
            apt-get install -y docker-compose-plugin
        else
            log "‚úÖ [DRY RUN] Docker Compose –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        fi
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    log "–°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
    local dirs=("data" "logs" "media" "staticfiles" "backups")

    for dir in "${dirs[@]}"; do
        if [ ! -d "$dir" ]; then
            if [ "$DRY_RUN" = false ]; then
                mkdir -p "$dir"
                chmod 755 "$dir"
            fi
            log "‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $dir"
        fi
    done
}

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup_environment() {
    if [ ! -f .env.production ]; then
        log "–°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
        if [ -f .env.production.example ]; then
            if [ "$DRY_RUN" = false ]; then
                cp .env.production.example .env.production
                chmod 600 .env.production
            fi
            log "‚úÖ –§–∞–π–ª .env.production —Å–æ–∑–¥–∞–Ω –∏–∑ –ø—Ä–∏–º–µ—Ä–∞"
        else
            warn "–§–∞–π–ª .env.production.example –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ .env.production –≤—Ä—É—á–Ω—É—é."
        fi
    fi
}

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö
copy_data_files() {
    local files=("shop1.yaml" "shop2.yaml")

    for file in "${files[@]}"; do
        if [ -f "$file" ] && [ ! -f "data/$file" ]; then
            if [ "$DRY_RUN" = false ]; then
                cp "$file" data/
                chmod 644 "data/$file"
            fi
            log "‚úÖ $file —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ data/"
        fi
    done
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_containers() {
    log "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
    if [ "$DRY_RUN" = false ]; then
        docker compose down --remove-orphans
    else
        log "‚úÖ [DRY RUN] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –±—É–¥—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    fi
}

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
build_images() {
    log "–°–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑—ã..."
    if [ "$DRY_RUN" = false ]; then
        docker compose build --no-cache
    else
        log "‚úÖ [DRY RUN] –û–±—Ä–∞–∑—ã –±—É–¥—É—Ç —Å–æ–±—Ä–∞–Ω—ã —Å --no-cache"
    fi
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    log "–ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã..."
    if [ "$DRY_RUN" = false ]; then
        docker compose up -d
    else
        log "‚úÖ [DRY RUN] –°–µ—Ä–≤–∏—Å—ã –±—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"
    fi
}

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
wait_for_services() {
    local timeout=60
    local counter=0

    log "–û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    sleep 5

    log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤..."
    while ! docker compose exec -T web python manage.py check --deploy > /dev/null 2>&1; do
        if [ $counter -ge $timeout ]; then
            error "–¢–∞–π–º-–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Django"
        fi
        log "‚è≥ –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å Django... ($counter/$timeout)"
        sleep 5
        counter=$((counter + 5))
    done
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
run_migrations() {
    log "–í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏..."
    if [ "$DRY_RUN" = false ]; then
        docker compose exec web python manage.py migrate
        log "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
    else
        log "‚úÖ [DRY RUN] –ë—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –º–∏–≥—Ä–∞—Ü–∏–∏"
    fi
}

# –°–±–æ—Ä —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
collect_static() {
    log "–°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã..."
    if [ "$DRY_RUN" = false ]; then
        docker compose exec web python manage.py collectstatic --noinput
        log "‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å–æ–±—Ä–∞–Ω—ã"
    else
        log "‚úÖ [DRY RUN] –ë—É–¥—É—Ç —Å–æ–±—Ä–∞–Ω—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
create_superuser() {
    log "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
    if [ "$DRY_RUN" = false ]; then
        docker compose exec web python manage.py shell -c "
from django.contrib.auth import get_user_model;
User = get_user_model();
if not User.objects.filter(email='admin@example.com').exists():
    User.objects.create_superuser('admin@example.com', 'admin123', first_name='Admin', last_name='User')
    print('‚úÖ –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: admin@example.com / admin123')
else:
    print('‚ÑπÔ∏è  –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
"
    else
        log "‚úÖ [DRY RUN] –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: admin@example.com / admin123"
    fi
}

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
load_test_data() {
    local files=("data/shop1.yaml" "data/shop2.yaml")

    for file in "${files[@]}"; do
        if [ -f "$file" ]; then
            log "–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ $file..."
            if [ "$DRY_RUN" = false ]; then
                docker compose exec web python manage.py load_yaml_data "/app/$file"
                log "‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ $file –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
            else
                log "‚úÖ [DRY RUN] –ë—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ $file"
            fi
        else
            warn "–§–∞–π–ª $file –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º..."
        fi
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
check_services_status() {
    log "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤..."
    if [ "$DRY_RUN" = false ]; then
        docker compose ps
    else
        log "‚úÖ [DRY RUN] –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"
    fi
}

# –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
backup_database() {
    if [ "$SKIP_BACKUP" = true ]; then
        warn "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (--skip-backup)"
        return
    fi

    local timestamp=$(date +'%Y%m%d_%H%M%S')
    local backup_dir="backups"
    local backup_file="$backup_dir/db_backup_$timestamp.sql"

    log "–°–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."

    if [ ! -d "$backup_dir" ]; then
        mkdir -p "$backup_dir"
    fi

    if [ "$DRY_RUN" = false ]; then
        if docker compose exec -T db pg_dump -U ${DB_USER:-diplom_user} ${DB_NAME:-diplom_db} > "$backup_file"; then
            log "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $backup_file"
        else
            warn "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        fi
    else
        log "‚úÖ [DRY RUN] –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $backup_file"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ Django Procurement..."

    if [ "$DRY_RUN" = true ]; then
        warn "–†–ï–ñ–ò–ú –ü–†–û–°–ú–û–¢–†–ê (DRY RUN) - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
    fi

    check_root
    check_docker
    check_docker_compose
    create_directories
    setup_environment
    copy_data_files
    backup_database
    stop_containers
    build_images
    start_services
    wait_for_services
    run_migrations
    collect_static
    create_superuser
    load_test_data
    check_services_status

    log ""
    log "üéâ –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    log ""
    log "üìã –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
    log "  üåê Web –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8000"
    log "  üîß –ê–¥–º–∏–Ω–∫–∞: http://localhost:8000/admin"
    log "  üìä API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/api/v1/"
    log "  üë§ –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: admin@example.com / admin123"
    log ""
    log "üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    log "  docker compose logs web          # –õ–æ–≥–∏ Django"
    log "  docker compose logs celery       # –õ–æ–≥–∏ Celery"
    log "  docker compose logs -f web       # –°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    log "  docker compose exec web python manage.py shell  # Django shell"
    log "  docker compose down              # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    log "  docker compose up -d             # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    log "  docker compose restart web       # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main