###############################################################################
### Backend-приложение для автоматизации закупок - HTTP тесты
###############################################################################

### Базовый URL
@baseUrl = http://localhost
@apiUrl = {{baseUrl}}/api/v1

### Переменные для тестирования
@userEmail = test@example.com
@userPassword = testpassword123
@shopEmail = shop@example.com
@shopPassword = shoppassword123

###############################################################################
### 0. ПОДГОТОВКА К ТЕСТИРОВАНИЮ
###############################################################################

### 0.1 Активация существующих пользователей (выполнить в терминале)
# docker compose exec web python manage.py shell -c 'from backend.models import User; User.objects.filter(email="ivan@example.com").update(is_active=True); print("User activated")'

### 0.2 Проверка товаров из YAML
GET {{apiUrl}}/products

### 0.3 Проверка категорий из YAML
GET {{apiUrl}}/categories

### 0.4 Проверка активных магазинов
GET {{apiUrl}}/shops

###############################################################################
### 1. РЕГИСТРАЦИЯ И АВТОРИЗАЦИЯ
###############################################################################

### 1.1 Регистрация покупателя
POST {{apiUrl}}/user/register/
Content-Type: application/json

{
  "first_name": "Иван",
  "last_name": "Петров",
  "email": "{{userEmail}}",
  "password": "{{userPassword}}",
  "company": "ООО Тест",
  "position": "Менеджер",
  "type": "buyer"
}

### 1.2 Регистрация поставщика
POST {{apiUrl}}/user/register
Content-Type: application/json

{
  "first_name": "Магазин",
  "last_name": "Владелец",
  "email": "{{shopEmail}}",
  "password": "{{shopPassword}}",
  "company": "ООО Магазин",
  "position": "Директор",
  "type": "shop"
}

### 1.3 Активация пользователя вручную (выполнить в терминале)
# docker compose exec web python manage.py shell -c 'from backend.models import User; User.objects.filter(email="test@example.com").update(is_active=True); print("User activated")'

### 1.4 Получить токен подтверждения (выполнить в терминале)
# docker compose exec web python manage.py shell -c 'from backend.models import ConfirmEmailToken; token = ConfirmEmailToken.objects.filter(user__email="test@example.com").first(); print(token.key if token else "No token found")'

### 1.5 Подтверждение email покупателя (если есть токен)
POST {{apiUrl}}/user/register/confirm/
Content-Type: application/json

{
  "email": "{{userEmail}}",
  "token": "7b33de104b208197af7ff9f1a1a677ca7"
}

### 1.6 Подтверждение email поставщика (если есть токен)
POST {{apiUrl}}/user/register/confirm/
Content-Type: application/json

{
  "email": "{{shopEmail}}",
  "token": "ЗАМЕНИТЕ_НА_РЕАЛЬНЫЙ_ТОКЕН"
}

### 1.7 Авторизация покупателя
POST {{apiUrl}}/user/login/
Content-Type: application/json

{
  "email": "{{userEmail}}",
  "password": "{{userPassword}}"
}

> {%
    client.global.set("userToken", response.body.Token);
    client.log("User Token: " + response.body.Token);
%}

### 1.8 Авторизация поставщика
POST {{apiUrl}}/user/login/
Content-Type: application/json

{
  "email": "{{shopEmail}}",
  "password": "{{shopPassword}}"
}

> {%
    client.global.set("shopToken", response.body.Token);
    client.log("Shop Token: " + response.body.Token);
%}

### 1.9 Получить токен администратора (выполнить в терминале)
# docker compose exec web python manage.py shell -c 'from django.contrib.auth import get_user_model; from rest_framework.authtoken.models import Token; User = get_user_model(); admin = User.objects.filter(is_superuser=True).first(); token, _ = Token.objects.get_or_create(user=admin); print(token.key)'

###############################################################################
### 2. УПРАВЛЕНИЕ ПРОФИЛЕМ
###############################################################################

### 2.1 Получить данные пользователя
GET {{apiUrl}}/user/details/
Authorization: Token {{userToken}}

### 2.2 Обновить данные пользователя
PATCH {{apiUrl}}/user/details/
Authorization: Token {{userToken}}
Content-Type: application/json

{
  "first_name": "Иван",
  "last_name": "Петров",
  "company": "ООО Новая компания",
  "position": "Старший менеджер"
}

### 2.3 Сброс пароля
POST {{apiUrl}}/user/password_reset/
Content-Type: application/json

{
  "email": "{{userEmail}}"
}

###############################################################################
### 3. КОНТАКТНЫЕ ДАННЫЕ
###############################################################################

### 3.1 Создать контакт
POST {{apiUrl}}/user/contact/
Authorization: Token {{userToken}}
Content-Type: application/json

{
  "city": "Москва",
  "street": "Тверская улица",
  "house": "1",
  "apartment": "10",
  "phone": "+7(999)123-45-67"
}

> {%
    client.global.set("contactId", response.body.id);
    client.log("Contact ID: " + response.body.id);
%}

### 3.2 Получить контакты
GET {{apiUrl}}/user/contact/
Authorization: Token {{userToken}}

### 3.3 Обновить контакт
PUT {{apiUrl}}/user/contact/
Authorization: Token {{userToken}}
Content-Type: application/json

{
  "id": {{contactId}},
  "city": "Санкт-Петербург",
  "street": "Невский проспект",
  "house": "10",
  "apartment": "5",
  "phone": "+7(999)987-65-43"
}

### 3.4 Удалить контакт
DELETE {{apiUrl}}/user/contact/
Authorization: Token {{userToken}}
Content-Type: application/json

{
  "items": "{{contactId}}"
}

###############################################################################
### 4. КАТАЛОГ ТОВАРОВ
###############################################################################

### 4.1 Получить категории
GET {{apiUrl}}/categories/

### 4.2 Получить магазины
GET {{apiUrl}}/shops/

### 4.3 Получить все товары
GET {{apiUrl}}/products/

### 4.4 Фильтр товаров по категории (замените ID на реальный)
GET {{apiUrl}}/products/?category_id=1

### 4.5 Фильтр товаров по магазину (замените ID на реальный)
GET {{apiUrl}}/products/?shop_id=1

### 4.6 Фильтр товаров по категории и магазину
GET {{apiUrl}}/products/?category_id=1&shop_id=1

###############################################################################
### 5. КОРЗИНА
###############################################################################

### 5.1 Получить корзину
GET {{apiUrl}}/basket/
Authorization: Token {{userToken}}

### 5.2 Добавить товары в корзину (замените product_info на реальный ID)
POST {{apiUrl}}/basket/
Authorization: Token {{userToken}}
Content-Type: application/json

{
  "items": "[{\"product_info\": 1, \"quantity\": 2}]"
}

> {%
    if (response.body.Status) {
        client.log("Items added to basket");
    }
%}

### 5.3 Обновить количество товаров в корзине (замените id на реальный)
PUT {{apiUrl}}/basket/
Authorization: Token {{userToken}}
Content-Type: application/json

{
  "items": "[{\"id\": 1, \"quantity\": 3}]"
}

### 5.4 Удалить товары из корзины
DELETE {{apiUrl}}/basket/
Authorization: Token {{userToken}}
Content-Type: application/json

{
  "items": "1"
}

###############################################################################
### 6. ЗАКАЗЫ
###############################################################################

### 6.1 Получить заказы
GET {{apiUrl}}/order/
Authorization: Token {{userToken}}

### 6.2 Создать заказ из корзины
POST {{apiUrl}}/order/
Authorization: Token {{userToken}}
Content-Type: application/json

{
  "id": 1,
  "contact": {{contactId}}
}

> {%
    client.global.set("orderId", response.body.id);
    client.log("Order ID: " + response.body.id);
%}

###############################################################################
### 7. ПОСТАВЩИКИ
###############################################################################

### 7.1 Получить статус магазина
GET {{apiUrl}}/partner/state/
Authorization: Token {{shopToken}}

### 7.2 Изменить статус магазина
POST {{apiUrl}}/partner/state/
Authorization: Token {{shopToken}}
Content-Type: application/json

{
  "state": "true"
}

### 7.3 Обновить прайс-лист
POST {{apiUrl}}/partner/update/
Authorization: Token {{shopToken}}
Content-Type: application/json

{
  "url": "https://raw.githubusercontent.com/netology-code/python-final-diplom/master/data/shop1.yaml"
}

### 7.4 Получить заказы поставщика
GET {{apiUrl}}/partner/orders/
Authorization: Token {{shopToken}}

###############################################################################
### 8. АДМИНИСТРАТИВНЫЕ ФУНКЦИИ
###############################################################################

### 8.1 Обновить статус заказа (только для администраторов)
POST {{apiUrl}}/admin/order/status/
Authorization: Token ЗАМЕНИТЕ_НА_ADMIN_TOKEN
Content-Type: application/json

{
  "order_id": {{orderId}},
  "state": "confirmed"
}

###############################################################################
### 9. ПОЛНЫЙ СЦЕНАРИЙ ПОКУПКИ
###############################################################################

### 9.1 Регистрация нового покупателя
POST {{apiUrl}}/user/register/
Content-Type: application/json

{
  "first_name": "Тест",
  "last_name": "Покупатель",
  "email": "buyer@test.com",
  "password": "testpass123",
  "company": "Тест Компания",
  "position": "Тестер",
  "type": "buyer"
}

### 9.2 Активация (выполнить в терминале)
# docker compose exec web python manage.py shell -c 'from backend.models import User; User.objects.filter(email="buyer@test.com").update(is_active=True); print("User activated")'

### 9.3 Авторизация
POST {{apiUrl}}/user/login/
Content-Type: application/json

{
  "email": "buyer@test.com",
  "password": "testpass123"
}

> {%
    client.global.set("testBuyerToken", response.body.Token);
%}

### 9.4 Создание контакта
POST {{apiUrl}}/user/contact/
Authorization: Token {{testBuyerToken}}
Content-Type: application/json

{
  "city": "Москва",
  "street": "Красная площадь",
  "house": "1",
  "phone": "+7(999)000-00-00"
}

> {%
    client.global.set("testContactId", response.body.id);
%}

### 9.5 Просмотр товаров
GET {{apiUrl}}/products/

### 9.6 Добавление в корзину (замените product_info на реальный)
POST {{apiUrl}}/basket/
Authorization: Token {{testBuyerToken}}
Content-Type: application/json

{
  "items": "[{\"product_info\": 1, \"quantity\": 1}]"
}

### 9.7 Просмотр корзины
GET {{apiUrl}}/basket/
Authorization: Token {{testBuyerToken}}

### 9.8 Оформление заказа (замените id на реальный ID корзины)
POST {{apiUrl}}/order/
Authorization: Token {{testBuyerToken}}
Content-Type: application/json

{
  "id": 1,
  "contact": {{testContactId}}
}

###############################################################################
### 10. НЕГАТИВНЫЕ ТЕСТЫ
###############################################################################

### 10.1 Регистрация с невалидными данными
POST {{apiUrl}}/user/register/
Content-Type: application/json

{
  "first_name": "",
  "email": "invalid-email",
  "password": "123"
}

### 10.2 Авторизация с неверными данными
POST {{apiUrl}}/user/login/
Content-Type: application/json

{
  "email": "nonexistent@example.com",
  "password": "wrongpassword"
}

### 10.3 Доступ без авторизации
GET {{apiUrl}}/user/details/

### 10.4 Добавление несуществующего товара в корзину
POST {{apiUrl}}/basket/
Authorization: Token {{userToken}}
Content-Type: application/json

{
  "items": "[{\"product_info\": 999999, \"quantity\": 1}]"
}

### 10.5 Создание заказа без контакта
POST {{apiUrl}}/order/
Authorization: Token {{userToken}}
Content-Type: application/json

{
  "id": 1
}

###############################################################################
### 11. ПРОИЗВОДИТЕЛЬНОСТЬ
###############################################################################

### 11.1 Массовый запрос товаров
GET {{apiUrl}}/products/

###
GET {{apiUrl}}/products/

###
GET {{apiUrl}}/products/

### 11.2 Множественные запросы корзины
GET {{apiUrl}}/basket/
Authorization: Token {{userToken}}

###
GET {{apiUrl}}/basket/
Authorization: Token {{userToken}}

###
GET {{apiUrl}}/basket/
Authorization: Token {{userToken}}

###############################################################################
### ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ
###############################################################################

### Очистка всех токенов
> {%
    client.global.clear("userToken");
    client.global.clear("shopToken");
    client.global.clear("testBuyerToken");
    client.global.clear("contactId");
    client.global.clear("testContactId");
    client.global.clear("orderId");
%}

### Проверка всех пользователей (выполнить в терминале)
# docker compose exec web python manage.py shell -c 'from backend.models import User; print(list(User.objects.values("email", "is_active", "type")))'

### Очистка тестовых данных (выполнить в терминале)
# docker compose exec web python manage.py shell -c 'from backend.models import User; User.objects.filter(email__in=["test@example.com", "buyer@test.com"]).delete(); print("Test users deleted")'
