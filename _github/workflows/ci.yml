name: CI - Tests and Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Weekly on Monday at 00:00 UTC
    - cron: '0 0 * * 1'

env:
  PYTHON_VERSION: "3.13"
  POSTGRES_DB: test_db
  POSTGRES_USER: test_user
  POSTGRES_PASSWORD: test_password
  REDIS_URL: "redis://localhost:6379/0"
  SECRET_KEY: ${{ secrets.TEST_SECRET_KEY || 'test-secret-key-for-ci' }}
  DEBUG: "False"

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy

      - name: Lint with flake8
        run: |
          flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 backend/ --count --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting with black
        run: black --check --diff backend/

      - name: Check import sorting with isort
        run: isort --check-only --profile black backend/

      - name: Static type checking with mypy
        run: mypy --ignore-missing-imports --strict backend/

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: lint

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        volumes:
          - postgres-data:/var/lib/postgresql/data

      redis:
        image: redis:7-alpine
        ports: ['6379:6379']
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest pytest-django pytest-cov

      - name: Run migrations
        env:
          DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        run: |
          python manage.py check
          python manage.py migrate --noinput

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
          REDIS_URL: ${{ env.REDIS_URL }}
          SECRET_KEY: ${{ env.SECRET_KEY }}
          DEBUG: ${{ env.DEBUG }}
        run: |
          coverage run --source='backend' -m pytest backend/ -v --durations=10
          coverage report --fail-under=60
          coverage xml

      - name: Upload coverage to Codecov
        if: success() && github.event_name != 'pull_request'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-procurement
          fail_ci_if_error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Check dependencies for vulnerabilities
        run: safety check --full-report

      - name: Security scan with Bandit
        run: |
          bandit -r backend/ -f json -o bandit-report.json -ll
          # Fail on high severity issues
          jq '.results | map(select(.issue_confidence == "HIGH" or .issue_severity == "HIGH")) | length' bandit-report.json > high_issues.txt
          if [ $(cat high_issues.txt) -gt 0 ]; then
            echo "High severity security issues found"
            exit 1
          fi

      - name: Upload Bandit report
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            high_issues.txt
          retention-days: 7

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}

      - name: Scan image for vulnerabilities
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload security scan results
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [lint, test, security, build]
    if: always()

    steps:
      - name: Check workflow status
        id: check
        run: |
          if [[ ${{ needs.lint.result }} != 'success' || 
                ${{ needs.test.result }} != 'success' || 
                ${{ needs.security.result }} != 'success' || 
                ${{ needs.build.result }} != 'success' ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=One or more CI checks failed. Please check the logs." >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=All CI checks passed successfully!" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        if: failure() && github.event_name != 'pull_request'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: ${{ steps.check.outputs.status == 'success' && 'good' || 'danger' }}
          SLACK_TITLE: 'CI/CD Pipeline - ${{ github.workflow }}'
          SLACK_MESSAGE: ${{ steps.check.outputs.message }}
          SLACK_USERNAME: 'GitHub Actions'
          SLACK_ICON: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png

volumes:
  postgres-data: