from django.core.management.base import BaseCommand
from django.db import connection, reset_queries
from django.test.utils import override_settings
import time
from backend.models import ProductInfo


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'

    @override_settings(DEBUG=True)
    def handle(self, *args, **options):
        self.stdout.write('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...\n')

        # –¢–µ—Å—Ç 1: –ë–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.stdout.write('‚ùå –ë–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (N+1):')
        reset_queries()
        start = time.time()

        products = ProductInfo.objects.all()[:50]
        for p in products:
            _ = p.product.name
            _ = p.shop.name
            _ = list(p.product_parameters.all())

        duration_bad = time.time() - start
        queries_bad = len(connection.queries)

        # –¢–µ—Å—Ç 2: –° –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
        self.stdout.write('\n‚úÖ –° –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π (select_related + prefetch):')
        reset_queries()
        start = time.time()

        products = ProductInfo.objects.select_related(
            'product', 'shop', 'product__category'
        ).prefetch_related(
            'product_parameters__parameter'
        ).all()[:50]

        for p in products:
            _ = p.product.name
            _ = p.shop.name
            _ = list(p.product_parameters.all())

        duration_good = time.time() - start
        queries_good = len(connection.queries)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.stdout.write('\n' + '=' * 60)
        self.stdout.write('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:')
        self.stdout.write('=' * 60)

        self.stdout.write(f'\n‚ùå –ë–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:')
        self.stdout.write(f'   –í—Ä–µ–º—è: {duration_bad:.3f} —Å–µ–∫')
        self.stdout.write(f'   SQL –∑–∞–ø—Ä–æ—Å–æ–≤: {queries_bad}')

        self.stdout.write(f'\n‚úÖ –° –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π:')
        self.stdout.write(f'   –í—Ä–µ–º—è: {duration_good:.3f} —Å–µ–∫')
        self.stdout.write(f'   SQL –∑–∞–ø—Ä–æ—Å–æ–≤: {queries_good}')

        improvement_time = (1 - duration_good / duration_bad) * 100
        improvement_queries = queries_bad - queries_good

        self.stdout.write(f'\nüéØ –£–õ–£–ß–®–ï–ù–ò–ï:')
        self.stdout.write(
            self.style.SUCCESS(
                f'   ‚ö° –í—Ä–µ–º—è: {improvement_time:.1f}% –±—ã—Å—Ç—Ä–µ–µ'
            )
        )
        self.stdout.write(
            self.style.SUCCESS(
                f'   üìâ –ó–∞–ø—Ä–æ—Å–æ–≤: —Å–æ–∫—Ä–∞—â–µ–Ω–æ –Ω–∞ {improvement_queries}'
            )
        )
